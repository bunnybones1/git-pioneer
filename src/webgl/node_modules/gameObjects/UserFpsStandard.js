var cannon = require("cannon");
var three = require("three");
var CollisionLayers = require("CollisionLayers");
var Crosshair = require("threejs-gui-crosshair");

function UserFpsStandard(camera, inputManager) {
	var quat = new cannon.Quaternion();
	quat.setFromEuler(Math.PI * -0.5, 0, Math.PI);
	var body = new cannon.Body({
		position: new cannon.Vec3(0, 6, 1.75), // m 
		quaternion: quat, // m 
		// fixedRotation: true,
		linearDamping: 0.5,
		// resistGravity: true,
		collisionFilterGroup: CollisionLayers.PLAYER,
		collisionFilterMask: CollisionLayers.ENVIRONMENT | CollisionLayers.ITEMS
	});
	// body.resistGravity = true;
	// var mesh = new three.Mesh(
	// 	geomLib.sphere(1, 16, 8),
	// 	new three.MeshBasicMaterial({
	// 		color: 0xffff00,
	// 		wireframe: true
	// 	})
	// );
	var mesh = new three.Object3D();

	var crosshair = new Crosshair();
	camera.add(crosshair);
	crosshair.visible = false;
	crosshair.position.z = -1;

	var pointLight = new three.PointLight(0xffffff, 1, 1, 2);
	camera.add(pointLight);

	camera = camera || new three.PerspectiveCamera(60, 0.1, 100);
	mesh.add(camera);

	var inputContainer = inputManager.fpsController.getInput();
	var forward = new cannon.Vec3(0, 0, -1);
	var delta = new cannon.Quaternion();
	var moveDelta = new cannon.Vec3();

	function onUpdateSim() {
		delta.setFromEuler(inputContainer.rotationX, inputContainer.rotationY, 0);
		body.quaternion.mult(delta, body.quaternion);
		body.lookAt(body.pointToWorldFrame(forward));
		moveDelta.set(inputContainer.moveX, inputContainer.moveY, inputContainer.moveZ);
		body.quaternion.vmult(moveDelta, moveDelta);
		body.position.vadd(moveDelta, body.position);
		if(inputContainer.fovScale != 1) {
			this.camera.fov *= inputContainer.fovScale;
			this.camera.fov = Math.clamp(this.camera.fov, 20, 140);
			this.camera.updateProjectionMatrix();
		}
		inputManager.fpsController.clear();
	}

	this.body = body;
	this.mesh = mesh;
	this.camera = camera;
	this.crosshair = crosshair;
	this.pointLight = pointLight;
	this.onUpdateSim = onUpdateSim.bind(this);
	this.onDestroy = onDestroy.bind(this);
}

function onDestroy() {
	this.crosshair.parent.remove(this.crosshair);
	this.pointLight.parent.remove(this.pointLight);
}

module.exports = UserFpsStandard;