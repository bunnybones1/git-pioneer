var three = require("three");
var cannon = require("cannon");
var geomLib = require("geometry/lib");
var matLib = require("materials/lib");
var BaseGun = require("./BaseGun");
var decorateMethodBefore = require("utils/decorateMethodBefore");

var GrappleLink = require("../items/GrappleLink");

require("extensions/threeCannon");

function HitScanGrappleLinker(pos) {
	var geometry = geomLib.gunBase(0.065, 0.035, 1.5, 16, 1).clone();
	var grabberGeometry = geomLib.grabber();
	var grabbers = 2;
	var s = 0.8;
	var placeMatrix = new three.Matrix4().compose(
		new three.Vector3(0, -0.76, 0.1 * s),
		new three.Quaternion(),
		new three.Vector3(s, s, s)
	);
	for(var i = 0; i < grabbers; i++) {
		var grabberMatrix = new three.Matrix4().makeRotationY(i/grabbers * Math.PI * 2);
		grabberMatrix.multiply(placeMatrix);
		geometry.merge(grabberGeometry, grabberMatrix);
	}

	var material = matLib.checkerboards.blue();
	BaseGun.call(this, pos, geometry, material);
	this.primaryFireStart = primaryFireStart.bind(this);
	this.primaryFireEnd = primaryFireEnd.bind(this);
	this.onCannonPostStep = onCannonPostStep.bind(this);
	decorateMethodBefore(this, "onEnterFrameEquipped", onEnterFrame.bind(this));
}

HitScanGrappleLinker.prototype = Object.create(BaseGun.prototype);

var _result = new cannon.RaycastResult();
function hitScan() {
	var from = new three.Vector3();
	var to = new three.Vector3();
	relative.subVectors(this.player.user.crosshair.localToWorld(to), this.player.camera.localToWorld(from));
	relative.multiplyScalar(100);
	to.add(relative);

	this.player.world.world.raycastClosest(from, to, {
		skipBackfaces: true
	}, _result);
	if(_result.hasHit && _result.body.type == cannon.Body.DYNAMIC) {
		return _result;
	}
}

var relative = new three.Vector3();
function primaryFireStart(pos, playerSize) {
	var result = hitScan.call(this);
	if(result) {
		this.player.world.makeHitEffect(result.hitPointWorld, playerSize * 0.3, 0.2);

		var grappleBody = new cannon.Body({
			type: cannon.Body.STATIC,
			position: this.player.user.crosshair.worldToLocal(new three.Vector3()).toCannon(), // m 
		});
		this.player.world.world.addBody(grappleBody);

		var spring = new cannon.Spring(grappleBody, result.body, {
			restLength: 0,
			localAnchorA: new cannon.Vec3(),
			worldAnchorB: result.hitPointWorld
		});

		var geom = geomLib.electricLink.getRandom();
		var mat = new three.LineBasicMaterial({
			color: 0xddffff
		});

		var effect = new three.Line(geom, mat);
		this.player.world.scene.add(effect);

		this.spring = spring;
		this.grappleBody = grappleBody;
		this.effect = effect;
		this.player.world.world.addEventListener("postStep", this.onCannonPostStep);
	}
}

function primaryFireEnd(pos, playerSize) {
	var spring = this.spring;
	if(spring) {
		var result = hitScan.call(this);
		if(result) {
			if(spring.bodyB != result.body) {
				var link = new GrappleLink(this.player.world, result.body, spring.bodyB, {
					worldAnchorA: result.hitPointWorld,
					localAnchorB: spring.localAnchorB
				});
				this.player.world.add(link);
			}
		}
		this.spring = null;
		this.player.world.world.removeEventListener("postStep", this.onCannonPostStep);
		this.player.world.world.removeBody(this.grappleBody);
		this.effect.parent.remove(this.effect);

	}
}

function onCannonPostStep(event) {
	this.grappleBody.position.copy(this.player.user.crosshair.localToWorld(new three.Vector3()));
	this.spring.applyForce();
}

function onEnterFrame() {
	var tool = this.player.activeTool;
	if(this.spring && tool) {
		this.effect.geometry = geomLib.electricLink.getRandom();
		this.effect.position.copy(tool.mesh.localToWorld(tool.nozzle.clone()));
		var target = this.spring.bodyB.position.toThree();
		this.effect.lookAt(target);
		var stretch = this.effect.position.clone().sub(target).length();
		var squash = Math.max(1, 1 / stretch);
		this.effect.scale.set(squash, squash, stretch);
	}
}

module.exports = HitScanGrappleLinker;