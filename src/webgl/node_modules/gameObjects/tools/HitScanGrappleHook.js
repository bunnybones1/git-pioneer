var three = require("three");
var cannon = require("cannon");
var geomLib = require("geometry/lib");
var matLib = require("materials/lib");
var BaseGun = require("./BaseGun");
var decorateMethodBefore = require("utils/decorateMethodBefore");

require("extensions/threeCannon");

function HitScanGrappleHook(pos) {
	var geometry = geomLib.gunBase(0.065, 0.035, 1.5, 16, 1).clone();
	var grabber = geomLib.grabber();
	var placeMatrix = new three.Matrix4().makeTranslation(0, -0.76, 0);

	geometry.merge(grabber, placeMatrix);
	var material = matLib.checkerboards.blue();
	BaseGun.call(this, pos, geometry, material);
	this.primaryFireStart = primaryFireStart.bind(this);
	this.primaryFireEnd = primaryFireEnd.bind(this);
	this.onCannonPostStep = onCannonPostStep.bind(this);
	decorateMethodBefore(this, "onEnterFrameEquipped", onEnterFrame.bind(this));
}

HitScanGrappleHook.prototype = Object.create(BaseGun.prototype);

var relative = new three.Vector3();
var result = new cannon.RaycastResult();
function primaryFireStart(pos, playerSize) {
	var from = new three.Vector3();
	var to = new three.Vector3();
	relative.subVectors(this.player.user.crosshair.localToWorld(to), this.player.camera.localToWorld(from));
	relative.multiplyScalar(100);
	to.add(relative);

	this.player.world.physics.raycastClosest(from, to, {
		skipBackfaces: true
	}, result);
	if(result.hasHit) {
		if(result.body.type == cannon.Body.DYNAMIC) {
			this.player.world.makeHitEffect(result.hitPointWorld, playerSize * 0.3, 0.2);

			var grappleBody = new cannon.Body({
				type: cannon.Body.STATIC,
				position: this.player.user.crosshair.worldToLocal(new three.Vector3()).toCannon(), // m 
			});
			this.player.world.physics.addBody(grappleBody);

			var spring = new cannon.Spring(grappleBody, result.body, {
				restLength: 0,
				localAnchorA: new cannon.Vec3(),
				localAnchorB: new cannon.Vec3()
			});

			var geom = geomLib.electricLink.getRandom();
			var mat = new three.LineBasicMaterial({
				color: 0xddffff
			});

			var effect = new three.Line(geom, mat);
			this.player.world.scene.add(effect);

			this.spring = spring;
			this.grappleBody = grappleBody;
			this.effect = effect;
			this.player.world.physics.addEventListener("postStep", this.onCannonPostStep);
		}
	}
}

function primaryFireEnd(pos, playerSize) {
	if(this.spring) {
		this.spring = null;
		this.player.world.physics.removeEventListener("postStep", this.onCannonPostStep);
		this.player.world.physics.removeBody(this.grappleBody);
		this.effect.parent.remove(this.effect);
	}
}

function onCannonPostStep(event) {
	this.grappleBody.position.copy(this.player.user.crosshair.localToWorld(new three.Vector3()));
	this.spring.applyForce();
}

function onEnterFrame() {
	var tool = this.player.activeTool;
	if(this.spring && tool) {
		this.effect.geometry = geomLib.electricLink.getRandom();
		this.effect.position.copy(tool.mesh.localToWorld(tool.nozzle.clone()));
		var target = this.spring.bodyB.position.toThree();
		this.effect.lookAt(target);
		var stretch = this.effect.position.clone().sub(target).length();
		var squash = 1 / stretch;
		this.effect.scale.set(squash, squash, stretch);
	}
}

module.exports = HitScanGrappleHook;