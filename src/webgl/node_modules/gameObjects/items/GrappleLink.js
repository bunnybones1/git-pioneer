var three = require("three");
var cannon = require("cannon");
var geomLib = require("geometry/lib");

require("extensions/threeCannon");

function GrappleLink(world, bodyA, bodyB, opts) {
	opts = opts || {};
	opts.restLength = 0;

	var spring = new cannon.Spring(bodyA, bodyB, opts);

	var geom = geomLib.electricLink.getRandom();
	var mat = new three.LineBasicMaterial({
		color: 0xddffff
	});

	var mesh = new three.Line(geom, mat);
	world.scene.add(mesh);

	this.spring = spring;
	this.mesh = mesh;
	
	this.onCannonPostStep = onCannonPostStep.bind(this);
	this.onEnterFrame = onEnterFrame.bind(this);
	world.physics.addEventListener("postStep", this.onCannonPostStep);	//TODO clean this up when removed from world
}

function onCannonPostStep(event) {
	this.spring.applyForce();
}

function onEnterFrame() {
	var mesh = this.mesh;
	mesh.geometry = geomLib.electricLink.getRandom();
	var spring = this.spring;
	mesh.position.copy(spring.bodyA.pointToWorldFrame(spring.localAnchorA));
	var target = spring.bodyB.pointToWorldFrame(spring.localAnchorB).toThree();
	mesh.lookAt(target);
	var stretch = mesh.position.clone().sub(target).length();
	var squash = Math.min(1, 1 / stretch);
	mesh.scale.set(squash, squash, stretch);
}

module.exports = GrappleLink;